schemes:
  myFont: &myFont # Font family
    family: JetBrainsMono Nerd Font Mono

    # The `style` can be specified to pick a specific face.
    style: Regular

# Live config reload (changes require restart)
live_config_reload: true

# Font configuration
font:
  normal: *myFont

  bold: *myFont

  italic: *myFont

  bold_italic: *myFont
  # Point size of the font
  size: 14.0

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0
    y: 0

  # Thin stroke font rendering (macOS only)
  #
  # Thin strokes are suitable for retina displays, but for non-retina you
  # probably want this set to false.
  #
  # macOS >= 10.14.x:
  #
  # If the font quality on non-retina display looks bad then set
  # `use_thin_strokes` to `true` and enable font smoothing by running the
  # following command:
  #   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`
  #   `defaults write -g AppleFontSmoothing -int 0`
  #
  # This is a global setting and will require a log out or restart to take
  # effect.
  # use_thin_strokes: true

# Tokyo Night theme
colors:
  primary:
    background: "#24283b"
    foreground: "#a9b1d6"

  # Normal colors
  normal:
    black: "#32344a"
    red: "#f7768e"
    green: "#9ece6a"
    yellow: "#e0af68"
    blue: "#7aa2f7"
    magenta: "#ad8ee6"
    cyan: "#449dab"
    white: "#9699a8"

  # Bright colors
  bright:
    black: "#444b6a"
    red: "#ff7a93"
    green: "#b9f27c"
    yellow: "#ff9e64"
    blue: "#7da6ff"
    magenta: "#bb9af7"
    cyan: "#0db9d7"
    white: "#acb0d0"

window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels. If both are zero this
  # setting is ignored.
  dimensions:
    columns: 100
    lines: 85

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is not scaled by
  # DPI and the specified value is always added at both opposing sides.
  padding:
    x: 0
    y: 0

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  # Window decorations
  #
  # Available values:
  # - full: borders and title bar
  # - none: neither borders nor title bar
  # - transparent: title bar, transparent background and title bar buttons
  # - buttonless: title bar, transparent background, but no title bar buttons
  decorations: full

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  startup_mode: Maximized

  # Background opacity
  opacity: 0.8

scrolling:
  # maximum number of lines in the scrollback buffer. Specifying '0' will
  # disable scrolling.
  history: 0

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: false

# Use custom cursor colors. If true, display the cursor in the cursor.foreground
# and cursor.background colors, otherwise invert the colors of the cursor.
custom_cursor_colors: true

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
bell:
  animation: EaseOutExpo
  color: "0xffffff"
  duration: 0

# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Option
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
# - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - ToggleFullscreen
#   - None
#
# Values for `action` (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
#

# Alacritty + Tmux key integration
#   `\x1c` is `C-\` as tmux prefix
#   `\x1b` is `Esc`
#   `\x02` is `C-b`
key_bindings:
  #   # ----- change font size ----
  #   - { key: Key0, mods: Command, action: ResetFontSize }
  #   - { key: Equals, mods: Command, action: IncreaseFontSize }
  #   - { key: Minus, mods: Command, action: DecreaseFontSize }
  #
  # ----- new pane/tab/window -----
  - { key: D, mods: Command, chars: "\x02\"" } # new vertical pane with default shell
  - { key: D, mods: Command|Shift, chars: "\x02%" } # new vertical pane with commands menu
  # - { key: Return, mods: Command, chars: "\x02%" } # new horizontal pane with default shell
  # - { key: Return, mods: Command|Shift, chars: "\x02|" } # new horizontal pane with commands menu
  # - { key: T, mods: Command|Shift, chars: "\x02C" } # new tab with commands menu
  # - { key: T, mods: Command, chars: "\x02c" } # new tab with default shell
  # - { key: N, mods: Command, chars: "\x02S" } # switch session in current window with local sessions menu
  - { key: N, mods: Command|Shift, command: {
          program: "/usr/local/bin/alacritty",
          # args:
          #   [
          #     "msg",
          #     "create-window",
          #     "-e",
          #     "/usr/local/bin/fish",
          #     "--login",
          #     "--command",
          #     "tmux-sessions --all",
          #   ],
        } }
  #
  #
  # open session in new window with all sessions menu across servers
  #
  #   # ----- popup window -----
  #   - { key: P, mods: Command, chars: "\x1cP" } # close the pane
  #
  # ----- close pane/tab/window -----
  - { key: W, mods: Command, chars: "\x1cx" } # close the pane
  - { key: W, mods: Command|Shift, chars: "\x1c&" } # close the tab
  - { key: Q, mods: Command, chars: "\x1cd" } # close the window

  #   # ----- copy mode -----
  #   - { key: F, mods: Command, chars: "\x1c[/" } # enter vi copy mode, and search from up to down
  #   - { key: F, mods: Command|Shift, chars: "\x1c[?" } # enter vi copy mode, search from down to up
  #
  #   # ----- misc shortcuts -----
  #   - { key: I, mods: Command, chars: "\x1c:" } # input tmux command
  #   - { key: I, mods: Command|Shift, chars: "\x1cI" } # synchronize panes in the current window
  #   - { key: R, mods: Command, chars: "\x1cR" } # run command with commands menu
  #   - { key: Z, mods: Command, chars: "\x1cz" } # zoom toggle of the current pane.
  #   - { key: Z, mods: Command|Shift, chars: "\x1c " } # retile panes in the current window with preset layouts
  #   - { key: Comma, mods: Command, chars: "\x1c," } # rename tab
  #   - { key: S, mods: Command, chars: "\x1b:w\x0a" } # Type <escape>:w<enter> to save vim
  #
  #  ----- navigate panes -----
  - { key: H, mods: Command, chars: "\x1ch" } # go to the pane left
  - { key: J, mods: Command, chars: "\x1cj" } # go to the pane above
  - { key: K, mods: Command, chars: "\x1ck" } # go to the pane below
  - { key: L, mods: Command, chars: "\x1cl" } # go to the pane right
#   - { key: Left, mods: Command, chars: "\x1ch" }
#   - { key: Down, mods: Command, chars: "\x1cj" }
#   - { key: Up, mods: Command, chars: "\x1ck" }
#   - { key: Right, mods: Command, chars: "\x1cl" }
#
#   # ----- resize panes -----
#   - { key: H, mods: Command|Shift, chars: "\x1cH" } # resize the current pane left
#   - { key: J, mods: Command|Shift, chars: "\x1cJ" } # resize the current pane above
#   - { key: K, mods: Command|Shift, chars: "\x1cK" } # resize the current pane below
#   - { key: L, mods: Command|Shift, chars: "\x1cL" } # resize the current pane right
#   - { key: Left, mods: Command|Shift, chars: "\x1cH" }
#   - { key: Down, mods: Command|Shift, chars: "\x1cJ" }
#   - { key: Up, mods: Command|Shift, chars: "\x1cK" }
#   - { key: Right, mods: Command|Shift, chars: "\x1cL" }
#
#   # ----- navigate tabs -----
#   - { key: B, mods: Command, chars: "\x1c^" } # back to last tab
#   - { key: LBracket, mods: Command, chars: "\x1cp" } # go to previous tab
#   - { key: RBracket, mods: Command, chars: "\x1cn" } # go to next tab
#   - { key: Key1, mods: Command, chars: "\x1c1" } # go to tab 1..9
#   - { key: Key2, mods: Command, chars: "\x1c2" }
#   - { key: Key3, mods: Command, chars: "\x1c3" }
#   - { key: Key4, mods: Command, chars: "\x1c4" }
#   - { key: Key5, mods: Command, chars: "\x1c5" }
#   - { key: Key6, mods: Command, chars: "\x1c6" }
#   - { key: Key7, mods: Command, chars: "\x1c7" }
#   - { key: Key8, mods: Command, chars: "\x1c8" }
#   - { key: Key9, mods: Command, chars: "\x1c9" }
#
#   # ----- move panes -----
#   - { key: Key1, mods: Command|Shift, chars: "\x1c\x1b1" } # move the current pane to tab 1..9
#   - { key: Key2, mods: Command|Shift, chars: "\x1c\x1b2" }
#   - { key: Key3, mods: Command|Shift, chars: "\x1c\x1b3" }
#   - { key: Key4, mods: Command|Shift, chars: "\x1c\x1b4" }
#   - { key: Key5, mods: Command|Shift, chars: "\x1c\x1b5" }
#   - { key: Key6, mods: Command|Shift, chars: "\x1c\x1b6" }
#   - { key: Key7, mods: Command|Shift, chars: "\x1c\x1b7" }
#   - { key: Key8, mods: Command|Shift, chars: "\x1c\x1b8" }
#   - { key: Key9, mods: Command|Shift, chars: "\x1c\x1b9" }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

  # URL launcher
  # url:
  # This program is executed when clicking on a text which is recognized as a URL.
  # The URL is always added to the command as the last parameter.
  #
  # When set to `None`, URL launching will be disabled completely.
  #
  # Default:
  #   - (macOS) open
  #   - (Linux) xdg-open
  #   - (Windows) explorer
  # launcher:
  #   program: xdg-open
  #   args: []

  # These are the modifiers that need to be held down for opening URLs when clicking
  # on them. The available modifiers are documented in the key binding section.
  # modifiers: Control|Shift

selection:
  semantic_escape_chars: ',│`|:"'' ()[]{}<>'

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

# Mouse bindings
#
# Available fields:
# - mouse
# - action
# - mods (optional)
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# All available `mods` and `action` values are documented in the key binding
# section.
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

cursor:
  # Cursor style
  #
  # Values for 'style':
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

# dynamic_title: false

debug:
  # Should display the render timer
  render_timer: false

  # Keep the log file after quitting Alacritty.
  persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - OFF
  #   - ERROR
  #   - WARN
  #   - INFO
  #   - DEBUG
  #   - TRACE
  log_level: OFF

  # Print all received window events.
  print_events: false

  # Record all characters and escape sequences as test data.
  ref_test: false
# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
# env:
#   TERM: xterm-256color
#
# shell:
#   program: /usr/local/bin/fish
#   args:
#     - --login
#     - --command
#     - "tmux new-session -A -D -s main"
